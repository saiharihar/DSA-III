#include <vector>
#include <algorithm>
#include <climits>
#include <iostream>
using namespace std;

class Solution {
public:
    int minimumDifference(vector<int>& nums) {
        int sum = 0;
        int n = nums.size();

        // Calculate total sum of the array elements
        for (int num : nums) {
            sum += num;
        }

        // dp[i][j] will be true if a subset with sum j can be achieved using the first i elements
        vector<vector<bool>> dp(n + 1, vector<bool>(sum + 1, false));

        // There is always a subset with sum 0: the empty subset
        for (int i = 0; i <= n; ++i) {
            dp[i][0] = true;
        }

        // Fill the dp table
        for (int i = 1; i <= n; ++i) {
            for (int j = 0; j <= sum; ++j) {
                if (nums[i - 1] <= j) {
                    dp[i][j] = dp[i - 1][j] || dp[i - 1][j - nums[i - 1]];
                } else {
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }

        // Find the minimum difference
        int min_diff = INT_MAX;
        for (int j = 0; j <= sum / 2; ++j) {
            if (dp[n][j]) {
                int current_diff = abs(sum - 2 * j);
                min_diff = min(min_diff, current_diff);
            }
        }

        return min_diff;
    }
};

// Example usage:
int main() {
    Solution sol;
    int n;
    cout << "Enter the number of elements: ";
    cin >> n;

    vector<int> nums(n);
    cout << "Enter the elements: ";
    for (int i = 0; i < n; ++i) {
        cin >> nums[i];
    }

    int result = sol.minimumDifference(nums);
    cout << "Minimum Difference: " << result << endl;

    return 0;
}
